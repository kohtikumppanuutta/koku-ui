/* 
 * Koku Citizen Table 
 * 
 *
 */
KokuCitizenTable.prototype = new KokuTable();
KokuCitizenTable.constructor = KokuCitizenTable;

function KokuCitizenTable() {
	this.flattenTasksContent = function(tasks) {
		for (var i = 0; i < tasks.length; i++)  {			
			tasks[i]["templateDescription"] = tasks[i].template.description;
			tasks[i]["templateId"] = tasks[i].template.templateId;
			tasks[i]["templateName"] = tasks[i].template.templateName;
			tasks[i]["cleanHtmlTemplateNameWithDescription"] = "<abbr class='valueWithDesc' title='"+ KokuUtil.escapeHTML(tasks[i].template.description) +"' >" + KokuUtil.escapeHTML(tasks[i].template.templateName) +"</abbr>";
		}
	};
};


KokuTable.prototype.createAppoitmentsTable = function() {

	var taskHtml = "";
	var formLink = "";

	/***************
	 * Public methods
	 */
	 var public = {
	 	open : createOpenAppointmentsTable,
	 	ready : createReadyAppointmentsTable,
	 	unanswered: createUnansweredAppoitmentsTable
	 };

	/*******************
	 * Private methods
	 */
	
	function createUnansweredAppoitmentsTable(tasks) {
		var columnNames = [
	                   "<spring:message code="message.from" />",
	                   "<spring:message code="message.subject" />",
	                   "<spring:message code="message.description" />"
	                  ];
	
		var columnIds = [
						 "senderUser",
		                 "cleanHtmlsubject",
		                 "cleanHtmldescription"
		                ];
		return createTable(tasks, columnNames, columnIds, "appointmentsTable", false);		                
	};	
	 
	function createOpenAppointmentsTable(tasks) {
		var columnNames = [
					   "<spring:message code="message.choose" />",
	                   "<spring:message code="message.from" />",
	                   "<spring:message code="message.subject" />",
	                   "<spring:message code="message.description" />"
	                  ];
	
		var columnIds = [
						 "senderUser",
		                 "cleanHtmlsubject",
		                 "cleanHtmldescription"
		                ];
		return createTable(tasks, columnNames, columnIds, "appointmentsTable", true);		                
	};
	
	function createReadyAppointmentsTable(tasks) {		
		var columnNames = [
	                   "<spring:message code="message.from" />",
	                   "<spring:message code="message.subject" />",
	                   "<spring:message code="message.description" />",
	                   "<spring:message code="message.status" />"
	                  ];
	
		var columnIds = [
						 "senderUser",
		                 "cleanHtmlsubject",
		                 "cleanHtmldescription",
		                 "status"
		                ];
		return createTable(tasks, columnNames, columnIds, "appointmentsTable", false);		                
	};
	
	function createTable(tasks, columnNames, columnIds, tableName, showSelectorCheckBox) {
		if (tasks == undefined || tasks == null || tasks.length == 0) {
			return KokuUtil.errorMsg.showErrorMsg("<spring:message code="errorMsg.noContent"/>");
		}
					
		KokuTable.prototype.createAppoitmentsTableUtils.shortenMsg(tasks);		
		return KokuTable.prototype.tableGenerator.createTable("kokuAjax.showAppointment", "appointmentsTable", columnNames, columnIds, tasks, showSelectorCheckBox);                
	}
	
	return public;
};


/**
 *  Pyynnöt Vastatut/vanhat / Requests recieved
 */
KokuCitizenTable.prototype.createRequestsTable = function() { 

	/***************
	 * Public methods
	 */
	var public = {
		old : old,
		replied: replied
	}
	
	/***************
	 * Private methods
	 */	

	function flatten(tasks) {
		for (var i = 0; i < tasks.length; i++)  {			
			tasks[i]["replierName"] = tasks[i].replierUser.fullName;
			tasks[i]["sender"] = tasks[i].request.senderUser.fullName;
			tasks[i]["cleanHtmlsubject"] = KokuUtil.shorty(tasks[i].request.subject, 40);
			tasks[i]["endDate"] = tasks[i].request.endDate;
			tasks[i]["creationDate"] = tasks[i].request.creationDate;
		}
	};
	
	function replied(tasks) {
		var columnNames = [
		                   "<spring:message code="response.reciever"/>",
		                   "<spring:message code="response.sender"/>",
		                   "<spring:message code="response.subject"/>",
		                   "<spring:message code="response.createdAt"/>",
		                   "<spring:message code="response.endDate2"/>"
		                  ];		
		return createTable(tasks, columnNames, "browseRepliedRequests");		
	}
	
	function old(tasks) {		
		var columnNames = [
		                   "<spring:message code="response.reciever"/>",
		                   "<spring:message code="response.sender"/>",
		                   "<spring:message code="response.subject"/>",
		                   "<spring:message code="response.createdAt"/>",
		                   "<spring:message code="response.endDate"/>"
		                  ];
		return createTable(tasks, columnNames, "browseRepliedRequests");		
	}
	
	function createTable(tasks, columnNames, tableName) {
		if (tasks == undefined || tasks == null || tasks.length == 0) {
			return showErrorMsgYouDontHaveAnyTipys();
		}
		
		var columnIds = [
						 "replierName",
		                 "sender",
		                 "cleanHtmlsubject",
		                 "creationDate",
		                 "endDate"
		                ];
		flatten(tasks);
		return KokuTable.prototype.tableGenerator.createTable("kokuAjax.showResponse", tableName, columnNames, columnIds, tasks, false);	
	}
		
	return public;
};


/**
 * Suostumukset / Saapuneet
 */
KokuCitizenTable.prototype.createConsentsAssignedTable = function(tasks) { 

	function flatten(tasks) {
		for (var i = 0; i < tasks.length; i++)  {
			tasks[i]["requesterFullName"] = (tasks[i]["requesterUser"]) ? tasks[i]["requesterUser"]["fullName"] : "";
			tasks[i]["cleanHtmlTemplateName"] = KokuUtil.shorty(tasks[i]["templateName"], 50);			
		}
	}
	
	if (tasks == undefined || tasks == null || tasks.length == 0) {
		return KokuUtil.errorMsg.showErrorMsg("<spring:message code="consent.errorMsg.noConsents"/>");
	}	
	
	var columnNames = [
	                   "<spring:message code="consent.requester"/>",
	                   "<spring:message code="consent.templateName"/>",
	                   "<spring:message code="consent.replyTill"/>"
	                  ];
	
	var columnIds = ["requesterFullName",
	                 "cleanHtmlTemplateName",
	                 "replyTill"
	                ];
	flatten(tasks);
	return this.tableGenerator.createTable("kokuAjax.showConsent", "browseRepliedRequests", columnNames, columnIds, tasks, false);
};

/**
 * Suostumukset / Vastatut 
 */
KokuCitizenTable.prototype.createConsentsCurrentTable = function(tasks) {

	function flatten(tasks) {
		for (var i = 0; i < tasks.length; i++)  {
			tasks[i]["anotherPermitterUserFullName"] = (tasks[i]["anotherPermitterUser"]) ? tasks[i]["anotherPermitterUser"]["fullName"] : "";
			tasks[i]["cleanHtmlTemplateName"] = KokuUtil.shorty(tasks[i]["templateName"], 40);			
		}
	}

	if (tasks == undefined || tasks == null || tasks.length == 0) {
		return KokuUtil.errorMsg.showErrorMsg("<spring:message code="consent.errorMsg.noConsents"/>");
	}
		
		
	var columnNames = ["<spring:message code="message.choose"/>",
	                   "<spring:message code="consent.templateName"/>",
	                   "<spring:message code="consent.status"/>",
	                   "<spring:message code="consent.approvalStatus"/>",
	                   "<spring:message code="consent.createType"/>",
	                   "<spring:message code="consent.givenDate"/>",
	                   "<spring:message code="consent.validDate"/>",
	                   "<spring:message code="consent.secondApprover"/>"
	                  ];
	
	var columnIds = ["cleanHtmlTemplateName",
	                 "status",
	                 "approvalStatus",
	                 "createType",
	                 "assignedDate",
	                 "validDate",
	                 "anotherPermitterUserFullName"
	                ];
	flatten(tasks);
	return this.tableGenerator.createTable("kokuAjax.showConsent", "consentsCurrentTable", columnNames, columnIds, tasks, true);
};

/**
 * Suostumukset / Vanhat 
 */
KokuCitizenTable.prototype.createConsentsOldTable = function(tasks) {

	function flatten(tasks) {
		for (var i = 0; i < tasks.length; i++)  {
			tasks[i]["anotherPermitterUserFullName"] = (tasks[i]["anotherPermitterUser"]) ? tasks[i]["anotherPermitterUser"]["fullName"] : "";
			tasks[i]["cleanHtmlTemplateName"] = KokuUtil.shorty(tasks[i]["templateName"], 50);			
		}
	}

	if (tasks == undefined || tasks == null || tasks.length == 0) {
		return KokuUtil.errorMsg.showErrorMsg("<spring:message code="consent.errorMsg.noConsents"/>");
	}
	
		
	var columnNames = [
	                   "<spring:message code="consent.templateName"/>",
	                   "<spring:message code="consent.status"/>",
	                   "<spring:message code="consent.approvalStatus"/>",
	                   "<spring:message code="consent.createType"/>",
	                   "<spring:message code="consent.givenDate"/>",
	                   "<spring:message code="consent.validDate"/>",
	                   "<spring:message code="consent.secondApprover"/>"
	                  ];
	
	var columnIds = ["cleanHtmlTemplateName",
	                 "status",
	                 "approvalStatus",
	                 "createType",
	                 "assignedDate",
	                 "validDate",
	                 "anotherPermitterUserFullName"
	                ];
	flatten(tasks);
	return this.tableGenerator.createTable("kokuAjax.showConsent", "consentsOldTable", columnNames, columnIds, tasks, false);
};



/**
 * Valtakirjat - Omat valtakirjat - Valtuutettuna?
 */
KokuCitizenTable.prototype.createBrowseWarrantsToMe = function(tasks) { 

	if (tasks == undefined || tasks == null || tasks.length == 0) {
		return KokuUtil.errorMsg.showErrorMsgYouDontHaveAnyConsents();
	}
	
	var columnNames = [
	                   "<spring:message code="warrant.templateName"/>",
	                   "<spring:message code="warrant.status"/>",
	                   "<spring:message code="warrant.validTill.short"/>"
	                  ];
	
	var columnIds = [
	                 "cleanHtmlTemplateNameWithDescription",
	                 "localizedStatus",
					 "validTill"
	                 ];
	
	this.flattenTasksContent(tasks);
	return this.tableGenerator.createTable("kokuAjax.showWarrant", "createBrowseWarrantsToMe" , columnNames, columnIds, tasks, false);
}

/**
 * Valtakirjat - Vastaanotetut?
 */
KokuCitizenTable.prototype.createBrowseWarrantsFromMe = function(tasks) { 
	function createEditConsentColumn(tasks) {
		for (var i = 0; i < tasks.length; i++)  {
			if (tasks[i].status != 'REVOKED') {
 				var url = "<%= portletPath %>/ValtakirjaEditConsent?FormID="+ tasks[i].authorizationId; 
				tasks[i]["cleanHtmlEditLink"] = "<a onclick='event.cancelBubble=true' class='editConsentLink' href="+url+" ><spring:message code="consent.edit"/></a>"; 
			} else {
				tasks[i]["cleanHtmlEditLink"] = "";
			}
		}
	};
	
	if (tasks == undefined || tasks == null || tasks.length == 0) {
		return KokuUtil.errorMsg.showErrorMsgYouDontHaveAnyConsents();
	}
	
	var columnNames = [
	                   "<spring:message code="warrant.templateName"/>",
	                   "<spring:message code="warrant.status"/>",
	                   "<spring:message code="warrant.validTill.short"/>",
	                   "<spring:message code="warrant.edit"/>"
	                  ];
	
	var columnIds = [
	                 "cleanHtmlTemplateNameWithDescription",
	                 "localizedStatus",
					 "validTill",
	                 "cleanHtmlEditLink"
	                 ];
	this.flattenTasksContent(tasks);
	createEditConsentColumn(tasks);

	return this.tableGenerator.createTable("kokuAjax.showWarrant", "createBrowseWarrantsFromMe", columnNames, columnIds, tasks, false);
}


		