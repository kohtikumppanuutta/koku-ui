/* 
 * Koku Employee Table
 *
 * 
 */
KokuEmployeeTable.prototype = new KokuTable();
KokuEmployeeTable.constructor = KokuEmployeeTable;

function KokuEmployeeTable() {

	this.flattenTasksContent = function(tasks) {
		for (var i = 0; i < tasks.length; i++)  {			
			tasks[i]["templateDescription"] = tasks[i].template.description;
			tasks[i]["templateId"] = tasks[i].template.templateId;
			tasks[i]["templateName"] = tasks[i].template.templateName;
			tasks[i]["cleanHtmlTemplateNameWithDescription"] = "<abbr class='valueWithDesc' title='"+ KokuUtil.escapeHTML(tasks[i].template.description) +"' >" + KokuUtil.escapeHTML(tasks[i].template.templateName) +"</abbr>";
		}
	};
};



KokuTable.prototype.createAppoitmentsTable = function() {

	var taskHtml = "";
	var formLink = "";

	/***************
	 * Public methods
	 */
	 var public = {
	 	open : createOpenAppointmentsTable,
	 	ready : createReadyAppointmentsTable
	 };

	/*******************
	 * Private methods
	 */
	 
	function createOpenAppointmentsTable(tasks) {
		
		if (tasks == undefined || tasks == null || tasks.length == 0) {
			return KokuUtil.errorMsg.showErrorMsg("<spring:message code="errorMsg.noContent"/>");
		}
		
		var columnNames = [
					   "<spring:message code="message.choose" />",
	                   "<spring:message code="message.to" />",
	                   "<spring:message code="message.subject" />",
	                   "<spring:message code="message.description" />",
	                  ];
	
		var columnIds = [
						 "receivingUser",
		                 "cleanHtmlsubject",
		                 "cleanHtmldescription",
		                ];
		                
		KokuTable.prototype.createAppoitmentsTableUtils.shortenMsg(tasks);
		                
		return KokuTable.prototype.tableGenerator.createTable("kokuAjax.showAppointment", "appointmentsTable", columnNames, columnIds, tasks);                
	};
	
	function createReadyAppointmentsTable(tasks) {
		
		if (tasks == undefined || tasks == null || tasks.length == 0) {
			return KokuUtil.errorMsg.showErrorMsg("<spring:message code="errorMsg.noContent"/>");
		}		
		
		var columnNames = [
					   "<spring:message code="message.choose" />",
	                   "<spring:message code="message.to" />",
	                   "<spring:message code="message.subject" />",
	                   "<spring:message code="message.description" />",
	                   "<spring:message code="message.status" />"
	                  ];
	
		var columnIds = [
						 "receivingUser",
		                 "cleanHtmlsubject",
		                 "cleanHtmldescription",
		                 "status"
		                ];
		                
		KokuTable.prototype.createAppoitmentsTableUtils.shortenMsg(tasks);		
		return KokuTable.prototype.tableGenerator.createTable("kokuAjax.showAppointment", "appointmentsTable", columnNames, columnIds, tasks);                
	};
	
	return public;
};



/**
 * Create application table
 */ 
 KokuEmployeeTable.prototype.createApplicationsTable = function(tasks) {
 	
	if (tasks == undefined || tasks == null || tasks.length == 0) {
		return KokuUtil.errorMsg.showErrorMsg('<spring:message code="application.kindergarten.noResults"/>');
	}
	
	var columnNames = ["<spring:message code="message.choose"/>",
	                   "<spring:message code="application.kindergarten.name"/>",
	                   "<spring:message code="application.kindergarten.childname"/>",
	                   "<spring:message code="application.kindergarten.guardianName"/>",
	                   "<spring:message code="application.kindergarten.applicantAccepted"/>",
	                   "<spring:message code="application.kindergarten.kindergarteAcceppted"/>",
	                   "<spring:message code="application.kindergarten.createdAt"/>",
	                   "<spring:message code="application.kindergarten.decision"/>",
	                   "<spring:message code="application.kindergarten.needForCareDate"/>"
	                  ];
	
	var columnIds = ["kindergartenName",
	                 "applicantName",
	                 "applicantGuardianName",
	                 "applicantAccepted",
	                 "placeAccepted",
	                 "createdAt",
	                 "answeredAt",
	                 "inEffectAt"
	                ];
	return this.tableGenerator.createTable("kokuAjax.showApplicationKindergarten", "browseKindergartenApplications", columnNames, columnIds, tasks);
};


/**
 *  (Pyynnöt) - employee Avoimet
 */
KokuEmployeeTable.prototype.createRequestsTable = function(tasks) { 

	function flatten(tasks) {
		for (var i = 0; i < tasks.length; i++)  {
			tasks[i]["cleanHtmlSubject"] = KokuUtil.shorty(KokuUtil.escapeHTML(tasks[i]["subject"]),40);
		}
	}
	
	if (tasks == undefined || tasks == null || tasks.length == 0) {
		return KokuUtil.errorMsg.showErrorMsgYouDontHaveAnyTipys();
	}

	var columnNames = [
	                   "<spring:message code="message.subject"/>",
	                   "<spring:message code="request.responded"/>",
	                   "<spring:message code="request.responded"/>",
	                   "<spring:message code="request.missed"/>",
	                   "<spring:message code="request.start"/>",
	                   "<spring:message code="request.end"/>"
	                  ];
	
	var columnIds = ["cleanHtmlSubject",
	                 "respondedAmount",
	                 "missedAmount",
	                 "creationDate",
	                 "endDate"
	                ];
	flatten(tasks);	                
	return this.tableGenerator.createTable("kokuAjax.showRequest", "requestsTableOpen", columnNames, columnIds, tasks, false);
};


/*
 * Tietopyynnöt
 */
KokuEmployeeTable.prototype.createInfoRequestsTable = function(tasks) { 

	function flattenTasksContent(tasks) {
		
		function getName(user) {
			if (user["firstname"] === undefined || user["lastname"] === undefined
				|| user["firstname"].length == 0 || user["lastname"].length == 0) {
				return user["displayname"];	
			} else {
				return user["fullName"];
			}			
		};
		
		for (var i = 0; i < tasks.length; i++)  {
			if (tasks[i].recieverUser.displayname === undefined || tasks[i].recieverUser.displayname.length == 0) {
				tasks[i]["recieverName"] = tasks[i].recieverRoleUid;
			} else {
				tasks[i]["recieverName"] = getName(tasks[i].recieverUser);		
			}		
			tasks[i]["senderName"] = getName(tasks[i].senderUser);
			tasks[i]["targetPersonName"] = getName(tasks[i].targetPersonUser);
		}
	}

	
	if (tasks == undefined || tasks == null || tasks.length == 0) {
		return KokuUtil.errorMsg.showErrorMsgYouDontHaveAnyTipys();
	}
	
	var columnNames = ["<spring:message code="message.choose"/>",
	                   "<spring:message code="tipy.receiver"/>",
	                   "<spring:message code="tipy.sender"/>",
	                   "<spring:message code="tipy.targetPerson"/>",
	                   "<spring:message code="tipy.title"/>",
	                   "<spring:message code="tipy.status"/>"
	                  ];
	
	var columnIds = ["recieverName",
	                 "senderName",
	                 "targetPersonName",
	                 "title",
	                 "localizedStatus"
	                 ];
	flattenTasksContent(tasks);
	return this.tableGenerator.createTable("kokuAjax.showTipy", "browseInfoRequests", columnNames, columnIds, tasks);		
}


/**
 * Selaa työntekijän omia suostumuksia?
 */
KokuEmployeeTable.prototype.createBrowseEmployeeOwnConsents = function(tasks) {

	function flatTasks(tasks) {
		/* Request sender fullname */
		/* Request reciever fullnames */
		for (var i = 0; i < tasks.length; i++)  {
			tasks[i]["anotherPermitter"] = (tasks[i]["anotherPermitterUid"]) ? 'Kyllä' : 'Ei';
			/* Request sender fullname */
			tasks[i]["requesterFullName"] = (tasks[i]["requesterUser"]) ?  tasks[i]["requesterUser"]["fullName"] : '?';
			/* Request recievers fullnames */
			if (tasks[i]["recipientUsers"]) {
				var recipients = tasks[i]["recipientUsers"];
				var recipientList = "";
				for (var user = 0; user < recipients.length; user++)  {
					recipientList += recipients[user]["fullName"] + ", ";
				}
				tasks[i]["cleanHtmlrecipientsFullNames"] = KokuUtil.shorty(recipientList.substring(0, recipientList.length-2), 20);
			} else {
				tasks[i]["cleanHtmlrecipientsFullNames"] = '?';
			}
		}
	};
	
	if (tasks == undefined || tasks == null || tasks.length == 0) {
		return KokuUtil.errorMsg.showErrorMsg("<spring:message code="consent.errorMsg.noConsents"/>");
	}
	
	var columnNames = ["<spring:message code="message.choose"/>",
	                   "<spring:message code="consent.reciever"/>",
	                   "<spring:message code="consent.templateName"/>",
	                   "<spring:message code="consent.status"/>",
	                   "<spring:message code="consent.approvalStatus"/>",
	                   "<spring:message code="consent.anotherPermitter"/>",
	                   "<spring:message code="consent.createType"/>",
	                   "<spring:message code="consent.givenDate"/>",
	                   "<spring:message code="consent.validDate"/>"
	                  ];
	
	var columnIds = ["cleanHtmlrecipientsFullNames",
	                 "templateName",
	                 "status",
	                 "approvalStatus",
	                 "anotherPermitter",
	                 "createType",
	                 "assignedDate",
	                 "validDate"];
	flatTasks(tasks);
	return this.tableGenerator.createTable("kokuAjax.showConsent", "createBrowseEmployeeOwnConsents", columnNames, columnIds, tasks);
}

/**
 * Listaa kansalaisen valtakirjat?
 */
KokuEmployeeTable.prototype.createBrowseUserWarrantsTable = function(tasks) { 

	function getName(user) {
		if (user["firstname"] === undefined || user["lastname"] === undefined
			|| user["firstname"].length == 0 || user["lastname"].length == 0) {
			return user["displayname"];	
		} else {
			return user["fullName"];
		}			
	}

	function flattenUsers(tasks) {
		for (var i = 0; i < tasks.length; i++)  {
			if (tasks[i].recieverUser.displayname === undefined || tasks[i].recieverUser.displayname.length == 0) {
				tasks[i]["recieverName"] = tasks[i].recieverRoleUid;
			} else {
				tasks[i]["recieverName"] = getName(tasks[i].recieverUser);		
			}		
			tasks[i]["senderName"] = getName(tasks[i].senderUser);
			tasks[i]["targetPersonName"] = getName(tasks[i].targetPersonUser);
		}
	}
	
	if (tasks == undefined || tasks == null || tasks.length == 0) {
		return KokuUtil.errorMsg.showErrorMsg("<spring:message code="warrant.errorMsg.noData"/>");
	}
	
	var columnNames = ["<spring:message code="message.choose"/>",
	                   "<spring:message code="warrant.sender"/>",
	                   "<spring:message code="warrant.reciever"/>",
	                   "<spring:message code="warrant.targetPersonName"/>",
	                   "<spring:message code="warrant.status"/>",
	                   "<spring:message code="warrant.templateName"/>",
	                   "<spring:message code="warrant.givenDate.short"/>",
	                   "<spring:message code="warrant.validTill.short"/>"
	                  ];
	
	var columnIds = [
	                 "senderName",
	                 "recieverName",
	                 "targetPersonName",
	                 "localizedStatus",
	                 "cleanHtmlTemplateNameWithDescription",
	                 "givenAt",
	                 "validTill"];
	                 
	this.flattenTasksContent(tasks);
	flattenUsers(tasks);
	return this.tableGenerator.createTable("kokuAjax.showWarrant", "browseUserConsentsTable", columnNames, columnIds, tasks);
}

