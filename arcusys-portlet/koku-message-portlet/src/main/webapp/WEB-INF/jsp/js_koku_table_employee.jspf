/* 
 * Koku Employee Table
 *
 * 
 */
KokuEmployeeTable.prototype = new KokuTable();
KokuEmployeeTable.constructor = KokuEmployeeTable;

function KokuEmployeeTable() {

	this.flattenTasksContent = function(tasks) {
		for (var i = 0; i < tasks.length; i++)  {			
			tasks[i]["templateDescription"] = tasks[i].template.description;
			tasks[i]["templateId"] = tasks[i].template.templateId;
			tasks[i]["templateName"] = tasks[i].template.templateName;
			tasks[i]["cleanHtmlTemplateNameWithDescription"] = "<abbr class='valueWithDesc' title='"+ KokuUtil.escapeHTML(tasks[i].template.description) +"' >" + KokuUtil.escapeHTML(tasks[i].template.templateName) +"</abbr>";
		}
	};
};

/**
 * Create application table
 */ 
 KokuEmployeeTable.prototype.createApplicationsTable = function(tasks) {
 	
	if (tasks == undefined || tasks == null || tasks.length == 0) {
		return KokuUtil.errorMsg.showErrorMsg('<spring:message code="application.kindergarten.noResults"/>');
	}
	
	var columnNames = ["<spring:message code="message.choose"/>",
	                   "<spring:message code="application.kindergarten.name"/>",
	                   "<spring:message code="application.kindergarten.childname"/>",
	                   "<spring:message code="application.kindergarten.guardianName"/>",
	                   "<spring:message code="application.kindergarten.applicantAccepted"/>",
	                   "<spring:message code="application.kindergarten.kindergarteAcceppted"/>",
	                   "<spring:message code="application.kindergarten.createdAt"/>",
	                   "<spring:message code="application.kindergarten.decision"/>",
	                   "<spring:message code="application.kindergarten.needForCareDate"/>"
	                  ];
	
	var columnIds = ["kindergartenName",
	                 "applicantName",
	                 "applicantGuardianName",
	                 "applicantAccepted",
	                 "placeAccepted",
	                 "createdAt",
	                 "answeredAt",
	                 "inEffectAt"
	                ];
	return this.tableGenerator.createTable("kokuAjax.showApplicationKindergarten", "browseKindergartenApplications", columnNames, columnIds, tasks);
};


/**
 *  (Pyynnöt) - employee Avoimet
 */
KokuEmployeeTable.prototype.createRequestsTable = function(tasks) { 
	
	if (tasks == undefined || tasks == null || tasks.length == 0) {
		return KokuUtil.errorMsg.showErrorMsgYouDontHaveAnyTipys();
	}

	var taskHtml = "";
	var formLink = "";		
	taskHtml = '<table class="task-manager-table">'
			+ '<tr class="task-manager-table trheader">'
			+ '<td class="choose"><spring:message code="message.choose" /></td>'
			+ '<td>' + '<spring:message code="message.subject" />' + '</td>'
			+ '<td>' + '<spring:message code="request.responded"/>' + '</td>'
			+ '<td>' + '<spring:message code="request.missed"/>'+ '</td>'
			+ '<td>' + '<spring:message code="request.start"/>'+ '</td>'
			+ '<td>' + '<spring:message code="request.end"/>'+ '</td>'
			+ '</tr>';
			 
	for ( var i = 0; i < tasks.length; i++) {
		
		if ((i+1)%2 == 0) {
			taskHtml += '<tr class="evenRow">';	
		} else {
			taskHtml += '<tr>';
		}
		
		taskHtml += '<td class="choose">' + '<input type="checkbox" name="message" value="' + tasks[i]["requestId"] + '" />' + '</td>'
				 + '<td class="messageItem" onclick="kokuAjax.showRequest(\''+ KokuUtil.escapeHTML(tasks[i]["requestId"]) + '\')" >' + KokuUtil.escapeHTML(tasks[i]["subject"]) + '</td>'
				 + '<td class="messageItem" onclick="kokuAjax.showRequest(\''+ KokuUtil.escapeHTML(tasks[i]["requestId"]) + '\')" >' + KokuUtil.escapeHTML(tasks[i]["respondedAmount"]) + '</td>'
				 + '<td class="messageItem" onclick="kokuAjax.showRequest(\''+ KokuUtil.escapeHTML(tasks[i]["requestId"]) + '\')" >' + KokuUtil.escapeHTML(tasks[i]["missedAmount"]) + '</td>'
				 + '<td class="messageItem" onclick="kokuAjax.showRequest(\''+ KokuUtil.escapeHTML(tasks[i]["requestId"]) + '\')" >' + KokuUtil.escapeHTML(tasks[i]["creationDate"]) + '</td>'
				 + '<td class="messageItem" onclick="kokuAjax.showRequest(\''+ KokuUtil.escapeHTML(tasks[i]["requestId"]) + '\')" >' + KokuUtil.escapeHTML(tasks[i]["endDate"]) + '</td>'
				 + '</tr>';
	}

	taskHtml += '</table>';
	return taskHtml;
};


/*
 * Tietopyynnöt
 */
KokuEmployeeTable.prototype.createInfoRequestsTable = function(tasks) { 

	function getName(user) {
		if (user["firstname"] === undefined || user["lastname"] === undefined
			|| user["firstname"].length == 0 || user["lastname"].length == 0) {
			return user["displayname"];	
		} else {
			return user["fullName"];
		}			
	}

	function flattenTasksContent(tasks) {
		for (var i = 0; i < tasks.length; i++)  {
			if (tasks[i].recieverUser.displayname === undefined || tasks[i].recieverUser.displayname.length == 0) {
				tasks[i]["recieverName"] = tasks[i].recieverRoleUid;
			} else {
				tasks[i]["recieverName"] = getName(tasks[i].recieverUser);		
			}		
			tasks[i]["senderName"] = getName(tasks[i].senderUser);
			tasks[i]["targetPersonName"] = getName(tasks[i].targetPersonUser);
		}
	}

	
	if (tasks == undefined || tasks == null || tasks.length == 0) {
		return KokuUtil.errorMsg.showErrorMsgYouDontHaveAnyTipys();
	}
	
	var columnNames = ["<spring:message code="message.choose"/>",
	                   "<spring:message code="tipy.receiver"/>",
	                   "<spring:message code="tipy.sender"/>",
	                   "<spring:message code="tipy.targetPerson"/>",
	                   "<spring:message code="tipy.title"/>",
	                   "<spring:message code="tipy.status"/>"
	                   // "<spring:message code="tipy.validTill.short"/>"
	                  ];
	
	var columnIds = ["recieverName",
	                 "senderName",
	                 "targetPersonName",
	                 "title",
	                 "localizedStatus"
	                 // "validTill"
	                 ];
	flattenTasksContent(tasks);
	return this.tableGenerator.createTable("kokuAjax.showTipy", "browseInfoRequests", columnNames, columnIds, tasks);		
}


/**
 * Selaa työntekijän omia suostumuksia?
 */
KokuEmployeeTable.prototype.createBrowseEmployeeOwnConsents = function(tasks) {

	function checkIfConsentHaveAnotherPermitter(tasks) {
		for (var i = 0; i < tasks.length; i++)  {
			if (tasks[i]["anotherPermitterUid"] !== undefined || tasks[i]["anotherPermitterUid"] !== null) {
				tasks[i]["anotherPermitter"] = 'Kyllä';
			} else {
				tasks[i]["anotherPermitter"] = 'Ei';
			}
		}
		
		/* get fullname */
		for (var i = 0; i < tasks.length; i++)  {
			if (tasks[i]["requesterUser"] !== undefined || tasks[i]["requesterUser"] !== null) {
				tasks[i]["requesterFullName"] = tasks[i]["requesterUser"]["fullName"];
			} else {
				tasks[i]["anotherPermitter"] = '?';
			}
		}
		
	};
	
	if (tasks == undefined || tasks == null || tasks.length == 0) {
		return KokuUtil.errorMsg.showErrorMsg("<spring:message code="consent.errorMsg.noConsents"/>");
	}
	
	var columnNames = ["<spring:message code="message.choose"/>",
	                   "<spring:message code="consent.requester"/>",
	                   "<spring:message code="consent.templateName"/>",
	                   "<spring:message code="consent.status"/>",
	                   "<spring:message code="consent.approvalStatus"/>",
	                   "<spring:message code="consent.anotherPermitter"/>",
	                   "<spring:message code="consent.createType"/>",
	                   "<spring:message code="consent.givenDate"/>",
	                   "<spring:message code="consent.validDate"/>"
	                  ];
	
	var columnIds = ["requesterFullName",
	                 "templateName",
	                 "status",
	                 "approvalStatus",
	                 "anotherPermitter",
	                 "createType",
	                 "assignedDate",
	                 "validDate"];
	checkIfConsentHaveAnotherPermitter(tasks);
	return this.tableGenerator.createTable("kokuAjax.showConsent", "createBrowseEmployeeOwnConsents", columnNames, columnIds, tasks);
}

/**
 * Listaa kansalaisen valtakirjat?
 */
KokuEmployeeTable.prototype.createBrowseUserWarrantsTable = function(tasks) { 
	
	if (tasks == undefined || tasks == null || tasks.length == 0) {
		return KokuUtil.errorMsg.showErrorMsg("<spring:message code="warrant.errorMsg.noData"/>");
	}
	var columnNames = ["<spring:message code="message.choose"/>",
	                   "<spring:message code="warrant.sender"/>",
	                   "<spring:message code="warrant.reciever"/>",
	                   "<spring:message code="warrant.targetPersonName"/>",
	                   "<spring:message code="warrant.status"/>",
	                   "<spring:message code="warrant.templateName"/>",
	                   "<spring:message code="warrant.givenDate.short"/>",
	                   "<spring:message code="warrant.validTill.short"/>"
	                  ];
	
	var columnIds = [
	                 "senderName",
	                 "recieverName",
	                 "targetPersonName",
	                 "localizedStatus",
	                 "cleanHtmlTemplateNameWithDescription",
	                 "givenAt",
	                 "validTill"];
	this.flattenTasksContent(tasks);
	return this.tableGenerator.createTable("kokuAjax.showWarrant", "browseUserConsentsTable", columnNames, columnIds, tasks);
}

