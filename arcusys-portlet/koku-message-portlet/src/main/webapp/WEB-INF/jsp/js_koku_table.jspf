
/* Koku utils JS */
function KokuTable() {

};

/** 
  *	Functions to generate table
  */
KokuTable.prototype.tableGenerator = {

			/**
			 * Generates table rows 
			 *
			 * @param {string] functionName
			 * @oaram {Array[String]} columnNames.
			 * @param {Object} tasks
			 * @param {boolean} generateCheckBox
			 * @return {string} table 
			 */
			 generateTableContent : function(jsFunctionName, columnIds, tasks, generateCheckBox) {
				var taskHtml = "";
				for ( var i = 0; i < tasks.length; i++) {
					taskHtml += this.generateRowTr(i);
					if (generateCheckBox === undefined || generateCheckBox === true || generateCheckBox === null) {
						taskHtml += '<td class="choose">' + '<input type="checkbox" name="message" value="' + i + '" />' + '</td>'
					}
					
					/* Generate columns */
					for (var j = 0; j < columnIds.length; j++)  {
						if (columnIds[j].indexOf("cleanHtml") === 0) {
							taskHtml += '<td class="messageItem ' + columnIds[j] + '" onclick="'+ jsFunctionName + '(\''+ i + '\')" >' + tasks[i][columnIds[j]] + '</td>';
						} else {
							taskHtml += '<td class="messageItem ' + columnIds[j] + '" onclick="'+ jsFunctionName + '(\''+ i + '\')" >' + KokuUtil.escapeHTML(tasks[i][columnIds[j]]) + '</td>';
						}
					}
					taskHtml +=	 '</tr>';
				}
				return taskHtml;
			},
							
			/**
			 * General use table generator
			 *  
			 * @param {string} jsFunctionName
			 * @param {string} styleName for table
			 * @param Array[String] columnNames (for spring)
			 * @param Array[String] columnIds. ColumnIds.length < columnNames.length
			 * @param {object} tasks
			 */
			 createTable : function(jsFunctionName, tableStyleName, columnNames, columnIds, tasks) {
				var taskHtml = "";		
				taskHtml = "<table class='task-manager-table "+ tableStyleName + "'>"
						+ '<tr class="task-manager-table trheader">';
										
				for (var i = 0; i < columnNames.length; i++)  {
					taskHtml += '<td>' + KokuUtil.escapeHTML(columnNames[i]) + '</td>';
				}
						
				taskHtml += '</tr>';
				taskHtml += this.generateTableContent(jsFunctionName, columnIds, tasks);
				taskHtml += '</table>';
				return taskHtml;		
			},
			
			/**
			 * Generates tr-element with style "evenRow" if row is even 
			 * and "oddRow" if row is odd.
			 *
			 * @param {number} row
			 * @return {string} 
			 */
			generateRowTr : function(row) {
				var taskHtml = "";
				if((row+1)%2 == 0) {
					taskHtml += '<tr class="evenRow">';	
				}else {
					taskHtml += '<tr class="oddRow">';
				}
				return taskHtml;
			}			
}

/*
 * Viestit / Messages 
 */
KokuTable.prototype.createMessagesTable = function(tasks, taskType) {
	/* Formats sender field */
		function formatSender(taskType) {
			
			if(taskType == "msg_inbox" || taskType == "msg_archive_inbox")
				return  "<spring:message code="message.from" />";
			else 
				return "<spring:message code="message.receiver" />";	
		}
		
		/* Formats user field */
		function formatUser(task, taskType) {
		
			function getName(user) {
				if (user["firstname"] === undefined || user["lastname"] === undefined
					|| user["firstname"].length == 0 || user["lastname"].length == 0) {
					return user["displayname"];	
				} else {
					return user["fullName"];
				}			
			}
		
			if(taskType == "msg_inbox" ||taskType == "msg_archive_inbox") {
				return KokuUtil.escapeHTML(getName(task["senderUser"]));
			} else {
				var recipients = getName(task["recipientUsers"][0]);
				for ( var i = 1; i < task["recipientUsers"].length; i++) {						
					recipients += ", " + getName(task["recipientUsers"][i]);
				}
				return KokuUtil.escapeHTML(recipients);
			}
		}
		
		/* Formats subject field */
		function formatSubject(subject) {
			if(subject == "") {
				return  "<spring:message code="message.noSubject" />";
			} else {
				return KokuUtil.escapeHTML(subject);
			}
		}
		
		if (tasks == undefined || tasks == null || tasks.length == 0) {
			return KokuUtil.errorMsg.showErrorMsg("<spring:message code="errorMsg.noContent"/>");
		}
		
		if (taskType === undefined || taskType === null) {
			console.error("TaskType parameter missing. MessageTable might not be rendered correctly!");
		}
		
		var taskHtml = "";
		var formLink = "";
		
		taskHtml = '<table class="task-manager-table messageTable">'
				+ '<tr class="task-manager-table trheader">'
				+ '<td class="choose"><spring:message code="message.choose" /></td>'
				+ '<td>' + formatSender(taskType) + '</td>'
				+ '<td>' + '<spring:message code="message.subject" />' + '</td>'
				+ '<td><spring:message code="message.received" /></td>'
				+ '</tr>';
				 
		for ( var i = 0; i < tasks.length; i++) {
			
			if((i+1)%2 == 0) {
				if (tasks[i]["messageStatus"] == 'Unread') { // for new messages
					taskHtml += '<tr class="evenRow new">';
				} else {
					taskHtml += '<tr class="evenRow">';
				}	
			} else {
				if(tasks[i]["messageStatus"] == 'Unread') {
					taskHtml += '<tr class="new">';
				} else {
					taskHtml += '<tr>';
				}
			}
			
			taskHtml += '<td class="choose">' + '<input type="checkbox" name="message" value="' + KokuUtil.escapeHTML(tasks[i]["messageId"]) + '" />' + '</td>'
					 + '<td class="messageItem msgReciever" onclick="kokuAjax.showMessage(\''+ tasks[i]["messageId"] + '\')" >' + KokuUtil.shorty(formatUser(tasks[i], taskType), 20) + '</td>'
					 + '<td class="messageItem msgSubject" onclick="kokuAjax.showMessage(\''+ tasks[i]["messageId"] + '\')" >' + KokuUtil.shorty(formatSubject(tasks[i]["subject"]), 50) + '</td>'
					 + '<td class="messageItem msgDate" onclick="kokuAjax.showMessage(\''+ tasks[i]["messageId"] + '\')" >' + KokuUtil.escapeHTML(tasks[i]["creationDate"]) + '</td>'
					 + '</tr>';
		}
		
		taskHtml += '</table>';
		return taskHtml;
};

/* Great example how to do shitty JS code. */
KokuTable.prototype.createAppoitmentsTableUtils = {

	/* Formats subject field */
	formatSubject : function(subject) {
		if(subject == "")		
			return  "<spring:message code="message.noSubject" />";
		else
			return KokuUtil.escapeHTML(subject);
	},
	
	/* Shorten subject and description  */
	shortenMsg : function(tasks) {	
		for (var i = 0; i < tasks.length; i++)  {
			
			tasks[i]["receivingUser"] = (tasks[i]["receivingUser"]) ? KokuUtil.escapeHTML(tasks[i]["receivingUser"]["fullName"]) : "";
			tasks[i]["senderUser"] = (tasks[i]["senderUser"]) ? KokuUtil.escapeHTML(tasks[i]["senderUser"]["fullName"]) : "";
			tasks[i]["cleanHtmlsubject"] = KokuUtil.shorty(KokuUtil.escapeHTML(this.formatSubject(tasks[i]["subject"])), 35);
			tasks[i]["cleanHtmldescription"] = KokuUtil.shorty(KokuUtil.escapeHTML(tasks[i]["description"]), 25);
			tasks[i]["status"] = KokuUtil.escapeHTML(tasks[i]["status"])
		}
	}
};

/**
 * Create requests table in Html
 */
KokuTable.prototype.createRequestsEmployeeTable = function(tasks) { 

	if (tasks == undefined || tasks == null || tasks.length == 0) {
		return KokuUtil.errorMsg.showErrorMsg("<spring:message code="errorMsg.noContent"/>");
	}

	var taskHtml = "";
	taskHtml = '<table class="task-manager-table requestsEmployeeTable">'
			+ '<tr class="task-manager-table trheader">'
			/* + '<td class="choose"><spring:message code="message.choose" /></td>' */
			+ '<td>' + '<spring:message code="message.subject" />' + '</td>'
			+ '<td>' + '<spring:message code="request.responded"/>' + '</td>'
			+ '<td>' + '<spring:message code="request.missed"/>'+ '</td>'
			+ '<td>' + '<spring:message code="request.start"/>'+ '</td>'
			+ '<td>' + '<spring:message code="request.end"/>'+ '</td>'
			+ '</tr>';
			 
	for ( var i = 0; i < tasks.length; i++) {
		
		if ((i+1)%2 == 0) {
			taskHtml += '<tr class="evenRow">';	
		} else {
			taskHtml += '<tr>';
		}
		
		/*  '<td class="choose">' + '<input type="checkbox" name="message" value="' + tasks[i]["requestId"] + '" />' + '</td>' */
		taskHtml += '<td class="messageItem subject" onclick="kokuAjax.showRequest(\''+ tasks[i]["requestId"] + '\')" >' + KokuUtil.shorty(KokuUtil.escapeHTML(tasks[i]["subject"]), 40) + '</td>'
				 + '<td class="messageItem respondedAmount" onclick="kokuAjax.showRequest(\''+ tasks[i]["requestId"] + '\')" >' + KokuUtil.escapeHTML(tasks[i]["respondedAmount"]) + '</td>'
				 + '<td class="messageItem missedAmount" onclick="kokuAjax.showRequest(\''+ tasks[i]["requestId"] + '\')" >' + KokuUtil.escapeHTML(tasks[i]["missedAmount"]) + '</td>'
				 + '<td class="messageItem creationDate" onclick="kokuAjax.showRequest(\''+ tasks[i]["requestId"] + '\')" >' + KokuUtil.escapeHTML(tasks[i]["creationDate"]) + '</td>'
				 + '<td class="messageItem endDate" onclick="kokuAjax.showRequest(\''+ tasks[i]["requestId"] + '\')" >' + KokuUtil.escapeHTML(tasks[i]["endDate"]) + '</td>'
				 + '</tr>';
	}

	taskHtml += '</table>';
	return taskHtml;
}


KokuTable.prototype.createRequestReplied = function(tasks) {

	function flattenTasksRepliedTasks(tasks) {
		for (var i = 0; i < tasks.length; i++)  {			
			tasks[i]["replierName"] = tasks[i].replierUser.fullName;
			tasks[i]["sender"] = tasks[i].request.senderUser.fullName;
			tasks[i]["subject"] = tasks[i].request.subject;
			tasks[i]["endDate"] = tasks[i].request.endDate;
			tasks[i]["creationDate"] = tasks[i].request.creationDate;
		}
	};
	
	if (tasks == undefined || tasks == null || tasks.length == 0) {
		return KokuUtil.errorMsg.showErrorMsgYouDontHaveAnyTipys();
	}
	
	var columnNames = ["<spring:message code="message.choose"/>",
	                   "<spring:message code="response.reciever"/>",
	                   "<spring:message code="response.sender"/>",
	                   "<spring:message code="response.subject"/>",
	                   "<spring:message code="response.createdAt"/>",
	                   "<spring:message code="response.endDate"/>"
	                  ];
	
	var columnIds = ["replierName",
	                 "sender",
	                 "subject",
	                 "creationDate",
	                 "endDate"
	                ];
	flattenTasksRepliedTasks(tasks);
	return this.tableGenerator.createTable("kokuAjax.showResponse", "browseRepliedRequests", columnNames, columnIds, tasks);
};

			